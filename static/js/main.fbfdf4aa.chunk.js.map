{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","textarea","step","interval","result","activeList","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","setState","_ref","timer","clearInterval","active","toArray","length","setInterval","_ref2","newActiveList","objectSpread","defineProperty","_this$state","regex","RegExp","concat","match","_this3","_this$state2","react_default","a","createElement","Fragment","Helmet","rel","href","index_es","className","label","value","onChange","_ref3","target","multiline","rows","margin","variant","lab_index_es","_","parseInt","color","onClick","rewind","reset","map","t","index","key","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbfdf4aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { TextField, Typography, Card, Button } from '@material-ui/core';\nimport { Slider } from '@material-ui/lab';\nimport './App.css';\n\nconst initialTextarea = `Maxime adipisci atque est sed molestiae eum qui modi.`\n\nconst initialState = {\n  textarea: initialTextarea,\n  step: 1,\n  interval: 300,\n  result: '',\n  activeList: {},\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = initialState;\n  }\n\n  rewind() {\n    this.setState(({ textarea }) => ({\n      activeList: {},\n      result: textarea,\n    }), () => {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n\n      const { interval } = this.state;\n\n      this.active = this.toArray().length;\n      this.timer = setInterval(() => {\n        this.setState(({ activeList }) => {\n          const newActiveList = {...activeList, [this.active]: true};\n\n          if (this.active < 0) {\n            clearInterval(this.timer);\n            return;\n          }\n\n          this.active = this.active - 1;\n\n          return {\n            activeList: newActiveList,\n          };\n        });\n      }, interval);\n    });\n  }\n\n  toArray() {\n    const { result, step } = this.state;\n\n    if (result.length < step) {\n      return [result];\n    }\n\n    const regex = new RegExp(`.{${step}}`, 'g');\n\n    return result.match(regex);\n  }\n\n  reset() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.setState(initialState);\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    const { textarea, step, interval, activeList } = this.state;\n\n    return (\n      <React.Fragment>\n        <Helmet>\n          <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" />\n          <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n        </Helmet>\n        <Card className=\"App\">\n          <form className=\"form\">\n            <TextField\n              className=\"form--textarea\"\n              label=\"Text\"\n              value={textarea}\n              onChange={({ target: { value } }) => this.setState({ \n                textarea: value,\n              })}\n              multiline\n              rows=\"4\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n            <div>\n              <Typography>Step:</Typography>\n              <br />\n              <Slider\n                value={step / 4 * 100}\n                onChange={(_, value) => this.setState({\n                  step: parseInt(value / 100 * 4),\n                })}\n              />\n              <br />\n              <Typography>{step}</Typography>\n            </div>\n            <div>\n              <Typography>Interval:</Typography>\n              <br />\n              <Slider\n                value={interval / 1000 * 100}\n                onChange={(_, value) => this.setState({\n                  interval: parseInt(value / 100 * 1000),\n                })}\n              />\n              <br />\n              <Typography>{interval}</Typography>\n            </div>\n            <div className=\"form--actions\">\n              <Button \n                variant=\"contained\" \n                color=\"primary\"\n                onClick={() => this.rewind()}\n              >\n                Rewind\n              </Button>\n              <Button \n                variant=\"contained\"\n                onClick={() => this.reset()}\n              >\n                Reset\n              </Button>\n            </div>\n          </form>\n          <div className=\"result\">\n            {this.toArray().map((t, index) => (\n              <span \n                className={activeList[index] ? 'result--active' : 'result--inactive'}\n                key={index}\n              >\n                {t}\n              </span>\n            ))}\n          </div>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}